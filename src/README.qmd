---
title: "Convert iRODS Metadata into a Python dictionary"
format: gfm
---

The `md2dict` module of `mango_mdconverter` creates Python dictionaries
by flattening namespaced iRODS metadata items.
This can be done:

- naively with regards to the semantics, simply unnesting the namespacing
    + also ignoring units
    + returning value-units tuples if units exist
- reorganizing the dictionary to bring ManGO schemas together and "analysis" metadata together

You can install this package with `pip`:

```{python}
pip install mango-mdconverter
```

The module can be imported like so:
```{python}
from mango_mdconverter import md2dict

# from mango_mdconverter.md2dict import convert_metadata_to_dict # to import a specific function
```

## Example

To understand this better, let's look at some examples.
We'll simulate a set of metadata from an iRODS item, and it looks like so:

```{python}
from irods.meta import iRODSMeta

metadata_items = [
    iRODSMeta("mgs.book.author.name", "Fulano De Tal", "1"),
    iRODSMeta("mgs.book.author.age", "50", "1"),
    iRODSMeta("mgs.book.author.pet", "cat", "1"),
    iRODSMeta("mgs.book.author.name", "Jane Doe", "2"),
    iRODSMeta("mgs.book.author.age", "29", "2"),
    iRODSMeta("mgs.book.author.pet", "cat", "2"),
    iRODSMeta("mgs.book.author.pet", "parrot", "2"),
    iRODSMeta("mgs.book.title", "A random book title"),
    iRODSMeta("mg.mime_type", "text/plain"),
    iRODSMeta("page_n", "567", "analysis/reading"),
    iRODSMeta("chapter_n", "15", "analysis/reading"),
]
```

## Naive conversion

The `unflatten_namespace_into_dict()` function updates a dictionary
with the name-value pairs of an AVU, and optionally with the units as well.
Given a dictionary `metadict`, we can provide it an AVU name and value to either add the respective keys and values to the dictionary
or, if the key already exists, to append the value to the list of
values.

```{python}
metadict = {}
md2dict.unflatten_namespace_into_dict(metadict, "AVU_name", "AVU_value")
metadict
```

Metadata names with dots will be assumed to be namespaced: they will
be split and their values will become dictionaries themselves.

```{python}
metadict = {}
md2dict.unflatten_namespace_into_dict(metadict, "level1.level2.level3", "AVU_value")
metadict
```

For a full list of metadata items, such as the output of the
`.metadata.items()` method of an iRODS data object or collection,
we could loop over the iterable:

```{python}
metadict = {}
for avu in metadata_items:
    md2dict.unflatten_namespace_into_dict(metadict, avu.name, avu.value)
metadict
```

As you can see from the example, the function can work ignoring units. This functionality is sufficient for the opensearch indexing.

For ManGO schemas, however, we want to use the units to keep track of repeatable composite fields.
In order to achieve that, we just have to also provide the unit and
set the `use_units` argument to `True`.
<!-- TODO: Probably the argument is unnecessary? -->

The `unpack_metadata_to_dict()` is a wrapper around this function
that always uses units and takes the whole `irods.meta.iRODSMeta`
object as an argument instead of the name, value and units separately.

```{python}
metadict = {}
for avu in metadata_items:
    md2dict.unpack_metadata_into_dict(metadict, avu)
metadict
```

Now items with units are rendered as tuples of values and units,
but these are not interpreted in the context of ManGO. This is why
this approach is the "na√Øve" one: in order to reorganize this dictionary
into something that makes sense given how ManGO uses schemas and units, we need to use another function.

## ManGO-specific conversion

The `convert_metadata_to_dict()` function takes an iterable of
`irods.meta.iRODSMeta` instances and returns a nested dictionary
based on the namespacing of the metadata names as well as the units.
It works upon the result of `unpack_metadata_into_dict()` and then
reformats the dictionary to group all metadata schemas under the
"schemas" key (instead of "mgs") and to group all items with units
starting with "analysis/" under the "analysis" key. In addition,
the repeatable composite fields of schemas are reorganized properly
based on their units.

```{python}
reorganized_dict = md2dict.convert_metadata_to_dict(metadata_items)
reorganized_dict
```

This function is to be used when converting ManGO metadata into a
dictionary, in order to export it to a sidecar file, for downloading, or in the context of cold storage.

## Dictionary filtering

The `filter_metadata_dict()` function allows you to filter the metadata dictionary (naive or otherwise) based on the (nested) keys of interest.

Let's say that from the naive metadata dictionary `metadict` we only want the metadata fields from the "mgs" and "mg" namespaces - in that case, the second argument is an array with the desired keys:

```{python}
md2dict.filter_metadata_dict(metadict, ["mgs", "mg"])
```

We could do the same with the ManGO-specific organization, to for example select the ManGO schemas and the analysis fields:

```{python}
md2dict.filter_metadata_dict(reorganized_dict, ["schema", "analysis"])
```

This level of filtering is equivalent to doing the following:

```{python}
{k: v for k, v in reorganized_dict.items() if k in ["schema", "analysis"]}
```

Where this function comes in particularly handy is when you want to filter nested fields. Say, for example, that you want to only retrieve specific schemas and/or specific analysis fields. While our example has only one schema, we can illustrate by selecting only the "title" of the "book" schema, discarding the "author":

```{python}

md2dict.filter_metadata_dict(reorganized_dict, {"schema": {"book": ["title"]}})
```

We can combine these partial dictionaries with full dictionaries (e.g. all of "analysis") by providing an empty dictionary when we don't want to filter further:

```{python}
md2dict.filter_metadata_dict(
    reorganized_dict, {"schema": {"book": ["title"]}, "analysis": {}}
)
```

This also works with repeatable composite fields. For example, by selecting only the "pet" and "name" of the "author" composite field, we'll get an array of dictionaries with only the "pet" and "name" keys:

```{python}

md2dict.filter_metadata_dict(
    reorganized_dict, {"schema": {"book": {"author": ["name", "pet"]}}}
)
```

